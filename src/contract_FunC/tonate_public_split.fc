;; =============== storage =============================

(slice, slice, int, int) load_data() inline {
    var ds = get_data().begin_parse();
    return (ds~load_msg_addr(), ds~load_msg_addr(), ds~load_uint(64), ds~load_uint(64));
}

() save_data(slice owner_address, slice tracker_address, int counter, int user_number) impure inline {
    set_data(
        begin_cell()
        .store_slice(owner_address)
        .store_slice(tracker_address)
        .store_uint(counter, 64)
        .store_uint(user_number, 64)
        .end_cell()
        );
}

() send_grams(slice address, int amount) impure {
  cell msg = begin_cell()
    .store_uint(0x18, 6) ;; bounce
    .store_slice(address) ;; 267 bit address
    .store_grams(amount)
    .store_uint(0, 107) ;; 106 zeroes +  0 as an indicator that there is no cell with the data
    .end_cell(); 
  send_raw_message(msg, 3); ;; mode, 2 for ignoring errors, 1 for sender pays fees, 64 for returning inbound message value
}

;; =============== messages =============================

() recv_internal(int msg_value, cell in_msg, slice in_msg_body) impure {
    (slice owner_address, slice tracker_address, int counter, int user_number) = load_data();
    
    if (counter != 0){
        send_grams(tracker_address, 1);
        counter = 0;
        save_data(owner_address, tracker_address, counter, user_number);

        return ();
    }

    if (in_msg_body.slice_empty?()){
        return ();
    }

    int op = in_msg_body~load_uint(32);
    slice cs = in_msg.begin_parse();
    int flags = cs~load_uint(4);
    slice sender_address = cs~load_msg_addr();

    if (op == 1){ ;; Simple Recieve Ton split equal amount for each user
        var [balance,_] = get_balance();
        int shares = ( balance - 5000000 ) / user_number;
        send_grams(sender_address, shares);
        user_number -= 1;
        save_data(owner_address,tracker_address,counter,user_number);

        return ();
    }
    if (op == 2){ ;; Withdrawal entire balance by owner
        if (owner_address.slice_hash() == sender_address.slice_hash()) {
            cell msg = begin_cell()
                .store_uint(0x18, 6) ;; bounce
                .store_slice(owner_address) ;; 267 bit address
                .store_grams(0)
                .store_uint(0, 107) ;; 106 zeroes +  0 as an indicator that there is no cell with the data
                .store_uint(0, 32)
                .end_cell(); 
            send_raw_message(msg, 128); ;; mode, 2 for ignoring errors, 1 for sender pays fees, 64 for returning inbound message value
        }
    }
    
    return ();
}

;; =============== getters =============================

var balance() method_id {
    var [balance, _] = get_balance();
    return balance;
}

slice address() method_id {
    var (owner_address, _, _, _) = load_data();
    return owner_address;
}

int counter() method_id {
    var (_, _, counter, _) = load_data();
    return counter;
}

int user_number() method_id {
    var (_, _, _, user_number) = load_data();
    return user_number;
}